// authController.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const authUtils = require('../utils/authUtils');

exports.signup = async (req, res) => {
    try {
        // Changed to use query parameters
        const { name, email, password } = req.query;

        const userExists = await User.findOne({ email });
        if (userExists) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const hashedPassword = await authUtils.hashPassword(password);

        const user = new User({
            name,
            email,
            password: hashedPassword
        });

        await user.save();

        const token = authUtils.generateToken(user._id);

        res.status(201).json({
            status: true,
            content: {
                data: {
                    id: user._id,
                    name: user.name,
                    email: user.email,
                    created_at: user.createdAt
                },
                meta: {
                    access_token: token
                }
            }
        });
    } catch (error) {
        console.error('Error in signup:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.signin = async (req, res) => {
    try {
        // Changed to use query parameters
        const { email, password } = req.query;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(401).json({ message: 'User does not exist' });
        }

        const isMatch = await authUtils.comparePassword(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = authUtils.generateToken(user._id);

        res.status(200).json({
            status: true,
            content: {
                data: {
                    id: user._id,
                    name: user.name,
                    email: user.email,
                    created_at: user.createdAt
                },
                meta: {
                    access_token: token
                }
            }
        });
    } catch (error) {
        console.error('Error in signin:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.getMe = async (req, res) => {
    try {
        // User is added to req in the authMiddleware
        const user = req.user;

        res.json({
            status: true,
            content: {
                data: {
                    id: user._id,
                    name: user.name,
                    email: user.email,
                    created_at: user.createdAt
                }
            }
        });
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};